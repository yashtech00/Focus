// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid           String       @id @default(uuid())
  username      String?
  email         String       @unique
  password      String?
  provider      Provider
  teamId        String 
  team          Team         @relation(fields: [teamId], references: [id])
  comment       Comment[]
  taskAssign    TaskAssign[]
  authoredTasks Task[]       @relation("TaskAuthor")
  asigneedTasks Task[]       @relation("TaskAssigned")
}

model Task {
  id             String    @id @default(uuid())
  title          String?
  description    String?
  status         String?
  tags           String?
  startDate      DateTime?
  endDate        DateTime?
  AuthorUserId   String
  assignedUserId String

  author     User         @relation("TaskAuthor", fields: [AuthorUserId], references: [uid])
  assigned   User?        @relation("TaskAssigned", fields: [assignedUserId], references: [uid])
  projectId  String
  project    Project      @relation(fields: [projectId], references: [id])
  taskAssign TaskAssign[]
  comment    Comment[]
}

model TaskAssign {
  id     String @id @default(uuid())
  userId String
  taskId String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [uid])
}

model Project {
  id          String        @id @default(uuid())
  title       String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  task        Task[]
  projectTeam ProjectTeam[]
}

model Team {
  id             String        @id @default(uuid())
  TeamName       String?
  projectManager String?
  projectOwner   String?
  projectTeam    ProjectTeam[]
  user           User[]
}

model ProjectTeam {
  id        String @id @default(uuid())
  teamId    String
  projectId String

  team    Team    @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Comment {
  id     String @id @default(uuid())
  text   String
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [uid])
}

enum Provider {
  Github
  Credentials
}
